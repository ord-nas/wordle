* Better estimate of expected moves given word set size.
  * Can start with MaxEntropy, get empirical data.
  * Repeated until reaching a fixed point.
* Probabilistic?
* Tree search, starting when set size is small emough?
  * Maybe to get a feel for if this will be useful or not, hammer on a single word and fuzz the guesses and see if we can do better than the best entropy guess.
* Correctly recognize that getting the word right is good actually! E.g.:

Words left: 2 {rebut, robot}
For guess aaron, there are 2 responses.
For guess aaron, potential reponses are: {aaron => (robot), aaron => (rebut)}
aaron
Words left: 1 {robot}
robot

Okay fine, but why didn't you guess one of robot or rebut instead of aaron? That would have narrowed it down the same way but you have a 50% chance of getting it on the first try!


TreeSearch

First word findings:

make && ./wordle --strategy=TreeSearch --words_per_node=2
> roate

make && ./wordle --strategy=TreeSearch --words_per_node=10
> trace

make && ./wordle --strategy=TreeSearch --words_per_node=20
> trace

make && ./wordle --strategy=TreeSearch --words_per_node=50
> slate

make && ./wordle --strategy=TreeSearch --depth=100 --words_per_node=2
> roate

make && ./wordle --strategy=TreeSearch --depth=100 --words_per_node=5
> reast

make && ./wordle --strategy=TreeSearch --depth=100 --words_per_node=10
> salet


In TreeSearch, we can limit the number of *responses* we explore as well, in
addition to the number of guesses. We should pick the responses with the highest
probabilities, and for all the unexplored ones just use the
count->expected_guesses formula from ComputeExpectedGuesses to approximate its
contribution to the total expected guesses sum.

We could specify the number of responses to pick with a max_num_responses and/or
a max_explored_probability.

Or maybe we need to approximate a count->expected_guesses function based on the
values that we get from the responses we *do* explore, and then apply them to
the ones we *don't* ?

Add annotate_decision_tree_stats mode: reads decision tree file, generates
stats, writes back out the decision tree file with a comment at the top with
stats.

Add colorize_decision_tree mode: reads decision tree file, replaces response
codes with colorized guesses, spits it to stdout (to be piped to `less -R`).
